{"version":3,"sources":["services/weather.js","Components/Menu.js","Components/UserInput.js","Components/Notification.js","Components/Current.js","Components/ForecastCard.js","Components/FiveDay.js","App.js","index.js"],"names":["baseUrl","getCurrent","a","cityName","coords","data","fetch","method","mode","headers","body","JSON","stringify","response","json","get5Day","Menu","className","to","UserInput","props","type","value","input","onChange","event","setInput","target","Notification","message","length","error","Current","main","temp","name","sys","country","ForecastCard","console","log","day","Date","dt_txt","toLocaleDateString","undefined","weekday","year","month","map","snapshot","imgUrl","weather","icon","toTimeString","split","src","alt","FiveDay","firstDay","list","getDate","days","i","date","diff","Number","push","city","dt","App","useState","setMessage","setError","current","setCurrent","fiveDay","setFiveDay","useEffect","timeoutId","setTimeout","dataObj","weatherService","currentData","fiveData","cod","geoUtility","clearTimeout","success","pos","longitude","latitude","navigator","geolocation","getCurrentPosition","err","enableHighAccuracy","timeout","maximumAge","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99b73272.chunk.js","sourcesContent":["const baseUrl = '/api'\n\nconst getCurrent = async ({ cityName, coords }) => {\n\n  const data = { cityName: cityName, coords: coords }\n  const response = await fetch(`${baseUrl}/current/`, {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  })\n  return response.json()\n}\n\nconst get5Day = async ({ cityName, coords }) => {\n\n  const data = { cityName: cityName, coords: coords }\n  const response = await fetch(`${baseUrl}/5day/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  })\n  return response.json()\n}\n\nexport default {\n  getCurrent,\n  get5Day\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Menu = () => (\n  <header className=\"app-header\">\n    <h3>\n      Avery's Weather App\n    </h3>\n\n    <div className=\"menu\">\n      <Link to='/current' className=\"link\">current</Link>\n      <Link to='/5day' className=\"link\">5day</Link>\n    </div>\n  </header>\n)\n\nexport default Menu","import React from 'react'\n\nconst UserInput = (props) => {\n  return (\n    <div className='user-input'>\n      <label>\n        Enter your city:\n      </label>\n      <input\n        type='text'\n        value={props.input}\n        onChange={event => props.setInput(event.target.value)}\n        className='input-box'\n      />\n    </div>\n  )\n}\n\nexport default UserInput","import React from 'react'\n\nconst Notification = (props) => {\n\n  if (props.message.length > 0) return (\n    <div className='notification'>\n      {props.message}\n    </div>\n  ) \n  else if (props.error.length > 0) return (\n    <div className='notification error'>\n      {props.error}\n    </div>\n  )\n  else return null\n}\n\nexport default Notification","import React from 'react'\n\nconst Current = ({data}) => {\n\n  if (data) return (\n    <div className='weather-data-container'>\n      <p className='currently'>It's currently...</p>\n        <h4 className='temp'>{data.main.temp} ℉</h4>\n        <p className='city'>in {data.name}, {data.sys.country}</p>\n      </div>\n  )\n  else return null\n}\n\nexport default Current","import React from 'react'\n\nconst ForecastCard = ({data}) => {\n  console.log(data)\n  const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' } \n  const day = new Date(data[0].dt_txt).toLocaleDateString(undefined, options)\n\n  return (\n    <div className='forecast-card'>\n      <h4>{day}</h4>\n        {data.map(snapshot => {\n          const imgUrl = `http://openweathermap.org/img/wn/${snapshot.weather[0].icon}.png`\n\n          return <div key={snapshot.dt_txt} className='snapshot'>\n              <p>{new Date(snapshot.dt_txt).toTimeString().split(' ')[0]}</p>\n              <p>{snapshot.main.temp} ℉</p>\n              <img src={imgUrl} alt='weather icon'/>\n            </div>\n          }\n        )}\n    </div>\n    )\n}\n\nexport default ForecastCard","import React from 'react'\nimport ForecastCard from './ForecastCard'\n\nconst FiveDay = ({ data }) => {\n\n  if (data) {\n    const firstDay = new Date(data.list[0].dt_txt).getDate()\n    const days = []\n\n    for (let i = 0; i < data.list.length; i++) {\n      const snapshot = data.list[i]\n      const date = new Date(snapshot.dt_txt).getDate()\n      const diff = Number(date) - Number(firstDay)\n\n      if (days[diff] === undefined) {\n        days[diff] = []\n      }\n\n      days[diff].push(snapshot)\n\n    }\n\n    return (\n      <div className='forecast-data-container'>\n        <p className='forecast-header'>5 day forecast for {data.city.name}, {data.city.country}</p>\n\n        <div className='forecast-list'>\n            {days.map(day => <ForecastCard data={day} key={day[0].dt} />)}\n        </div>\n      </div>\n    )\n  } else return null\n}\n\nexport default FiveDay","import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport {\n  Switch, Route, Redirect\n} from 'react-router-dom'\n\nimport weatherService from './services/weather'\nimport Menu from './Components/Menu'\nimport UserInput from './Components/UserInput'\nimport Notification from './Components/Notification'\nimport Current from './Components/Current'\nimport FiveDay from './Components/FiveDay'\n\nconst App = () => {\n  const [message, setMessage] = useState('')\n  const [error, setError] = useState('')\n  const [input, setInput] = useState('')\n  const [current, setCurrent] = useState(null)\n  const [fiveDay, setFiveDay] = useState(null)\n\n  useEffect(() => {\n    \n    const timeoutId = setTimeout(async () => {\n      if (input.length > 0) {\n        const dataObj = { cityName: input, coords: null }\n  \n        const currentData = await weatherService.getCurrent(dataObj)  \n        const fiveData = await weatherService.get5Day(dataObj)\n\n        if ((currentData.cod && currentData.cod === '404') || (fiveData.cod && fiveData.cod === '404')) {\n          setError('The entered city name returned no result. Please try a different name.')\n          setTimeout(() => {\n            setError('')\n          }, 5000)\n        } else {\n          setCurrent(currentData)\n          setFiveDay(fiveData)\n\n\n          setMessage(`Weather data for ${currentData.name} retrieved.`)\n          setTimeout(() => {\n            setMessage('')\n          }, 5000)\n        }\n\n      } else {\n        geoUtility()\n      }\n\n    }, 500)\n\n    return () => clearTimeout(timeoutId)\n\n  }, [input])\n\n\n  const geoUtility = () => {\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    }\n\n    const success = async (pos) => {\n\n      const dataObj = { \n        cityName: null, \n        coords: {\n          longitude: pos.coords.longitude,\n          latitude: pos.coords.latitude\n        } \n      }\n\n      const currentData = await weatherService.getCurrent(dataObj)\n      setCurrent(currentData)\n\n      const fiveData = await weatherService.get5Day(dataObj)\n      setFiveDay(fiveData)\n\n      setMessage(`Weather data for ${currentData.name} retrieved.`)\n      setTimeout(() => {\n        setMessage('')\n      }, 5000)\n    }\n\n    const error = (err) => {\n      setError('Could not retrieve your location, please type a city to get weather report.')\n      setTimeout(() => {\n        setError('')\n      }, 5000)\n    }\n\n    if (current && fiveDay) {\n      return null\n    } else {\n      // get the user location from browser\n      navigator.geolocation.getCurrentPosition(success, error, options)\n    }\n  }\n\n  return (\n    <div className='container'>\n      <Menu />\n\n      <UserInput setInput={setInput} input={input}/>\n\n      <Switch>\n        <Route path='/5day'>\n          {fiveDay && <FiveDay data={fiveDay}/>}\n        </Route>\n\n        <Route path='/current'>\n          {current && <Current data={current}/>}\n        </Route>\n\n        <Route path='/'>\n          <Redirect to='/current' />\n        </Route>\n\n      </Switch>\n\n      <Notification message={message} error={error}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter as Router\n} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}